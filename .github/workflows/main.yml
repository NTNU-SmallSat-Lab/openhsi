name: CI
on: [push, pull_request]
jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", "**/docs/**"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'
          
  build:
    name: Test OpenHSI
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]

    steps:
    - uses: actions/checkout@v2

    - name: Cache conda
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache if environment.yml has not changed
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
          hashFiles('environment.yml') }}

    - uses: conda-incubator/setup-miniconda@v2
      with:
        python-version:  ${{ matrix.python-version }}
        activate-environment: openhsi_tests
        environment-file: environment.yml
        auto-activate-base: false
        use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!

    - name: Install the OpenHSI
      shell: bash -l {0}
      run: |
        conda install conda-build
        conda develop .
        conda install -c conda-forge hvplot # placeholder so tests pass

    - name: Read all notebooks
      shell: bash -l {0}
      run: nbdev_read_nbs

    - name: Check if all notebooks are cleaned
      shell: bash -l {0}
      run: |
        echo "Check we are starting with clean git checkout"
        git status -uno -s
        #if [ -n "$( git status -uno -s | grep -v "assets" )" ]; then echo "git status is not clean"; false; fi
        echo "Trying to strip out notebooks"
        nbdev_clean_nbs
        echo "Check that strip out was unnecessary"
        git status -s # display the status to see which nbs need cleaning up
        if [ -n "$( git status -uno -s | grep -v "assets" )" ]; then echo -e "!!! Detected unstripped out notebooks\n!!!Remember to run nbdev_install_git_hooks"; false; fi
    
    - name: Check if there is no diff library/notebooks
      shell: bash -l {0}
      run: if [ -n "$(nbdev_diff_nbs)" ]; then echo -e "!!! Detected difference between the notebooks and the library"; false; fi
    
    - name: Run tests
      shell: bash -l {0}
      run: nbdev_test_nbs --verbose True --flags test
