# AUTOGENERATED! DO NOT EDIT! File to edit: 06_sensors.ipynb (unless otherwise specified).

__all__ = ['sensor_stream']

# Cell
import time
import serial
import numpy as np
import pandas as pd

# Cell

class sensor_stream(object):

    def __init__(self, baudrate=115200, port="/dev/ttyTHS0"):
        self.ser = serial.Serial(port=port,
                                baudrate=baudrate,
                                bytesize=serial.EIGHTBITS,
                                parity=serial.PARITY_NONE,
                                stopbits=serial.STOPBITS_ONE,
                                )

        # Initialise serial port and wait
        self.ser.flushInput()
        time.sleep(1)

        # Instantiate list for storing data
        self.data = []
        self.data_df = None


    def request(self):

        # Signal teensy to return new data packet
        self.ser.write("\n".encode())


    def record(self):

        # Check if line is ready
        if self.ser.inWaiting() > 0:

            # Read line from serial
            line_data = self.ser.readline()

            # Format data
            line_data = str(line_data).replace("b", "").replace("'", "").split(",")[:-1]

            # Append line to list
            self.data.append(line_data)


    def to_df(self, fields_dict):

        # Convert to dataframe
        self.data_df = pd.DataFrame(self.data, columns = fields_dict.keys())

        # Iterate through each column and update data type
        for field_name in fields_dict.keys():

            # Convert to float
            if fields_dict[field_name] == 'float' or fields_dict[field_name] == 'int':
                self.data_df[field_name] =  pd.to_numeric(self.data_df[field_name], errors='coerce')

            # Convert to datetime
            elif fields_dict[field_name] == 'datetime':
                self.data_df[field_name] =  pd.to_datetime(self.data_df[field_name], errors='coerce')

        # Return formatted data as dataframe
        return self.data_df